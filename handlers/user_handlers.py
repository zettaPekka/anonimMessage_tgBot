from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext

from states.user_states import AnsMessage
from core.init_bot import bot
from keyboards.user_kbs import start_kb, back_kb, answer_kb
from config import BOT_USERNAME, IMG_URL
from database.cruds import add_user_if_not_exists


user_router = Router() 


@user_router.message(CommandStart())
async def start(message: Message, state: FSMContext) -> None:
    await add_user_if_not_exists(message.from_user.id)
    if message.text != '/start':
        receiver_id = message.text[7:]
        if int(receiver_id) == message.from_user.id:
            await message.answer('<b>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ</b>')
            return
        await message.answer('<b>‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–ª —ç—Ç—É —Å—Å—ã–ª–∫—É</b>',
                                reply_markup=back_kb)
        await state.update_data(receiver_id=receiver_id)
        await state.set_state(AnsMessage.writing)
        return
    await message.answer(f'<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π! –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞, –ø–µ—Ä–µ–π–¥—è –ø–æ –Ω–µ–π, —á–µ–ª–æ–≤–µ–∫ —Å–º–æ–∂–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–º–∏–º–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: –∫—Ä—É–∂–∫–∏, –≥–æ–ª–æ—Å–æ–≤—ã–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–∏–¥–µ–æ, —Å—Ç–∏–∫–µ—Ä—ã –∏ –≥–∏—Ñ–∫–∏\n\nüîó https://t.me/{BOT_USERNAME}?start={message.from_user.id}</b>',
                            reply_markup=start_kb, disable_web_page_preview=True)

@user_router.callback_query(F.data.startswith('answer_'))
async def start(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.answer()
    if callback.message.text != '/start':
        receiver_id = int(callback.data.split('_')[1])
        await callback.message.answer('<b>‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–∞–ª —ç—Ç—É —Å—Å—ã–ª–∫—É</b>',
                                reply_markup=back_kb)
        await state.update_data(receiver_id=receiver_id)
        await state.set_state(AnsMessage.writing)
        return

@user_router.message(AnsMessage.writing)
async def send_message(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    receiver_id = int(data.get('receiver_id'))
    sender_id = message.from_user.id
    try:
        if message.content_type == ContentType.TEXT:
            await bot.send_message(receiver_id, f"<b>üì© –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>\n\n¬´{message.text.replace('<', '&lt;').replace('>', '&gt;')}¬ª", reply_markup=answer_kb(sender_id))
        elif message.content_type == ContentType.PHOTO:
            message_text = f"¬´{message.caption.replace('<', '&lt;').replace('>', '&gt;')}¬ª" if message.caption else ''
            await bot.send_photo(receiver_id, photo=message.photo[-1].file_id, caption=f'<b>üì© –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>\n\n{message_text}', reply_markup=answer_kb(sender_id))
        elif message.content_type == ContentType.VIDEO:
            message_text = f"¬´{message.caption.replace('<', '&lt;').replace('>', '&gt;')}¬ª" if message.caption else ''
            await bot.send_video(receiver_id, video=message.video.file_id, caption=f'<b>üì© –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>\n\n{message_text}', reply_markup=answer_kb(sender_id))
        elif message.content_type == ContentType.ANIMATION:
            message_text = f"¬´{message.caption.replace('<', '&lt;').replace('>', '&gt;')}¬ª" if message.caption else ''
            await bot.send_animation(receiver_id, animation=message.animation.file_id, caption=f'<b>üì© –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>\n\n{message_text}' ,reply_markup=answer_kb(sender_id))
        elif message.content_type == ContentType.VOICE:
            message_text = f"¬´{message.caption.replace('<', '&lt;').replace('>', '&gt;')}¬ª" if message.caption else ''
            await bot.send_voice(receiver_id, voice=message.voice.file_id, caption=f'<b>üì© –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!</b>\n\n{message_text}', reply_markup=answer_kb(sender_id))
        elif message.content_type == ContentType.VIDEO_NOTE:
            answer_message = await bot.send_video_note(receiver_id, video_note=message.video_note.file_id, reply_markup=answer_kb(sender_id))
            await bot.send_message(receiver_id, f'<b>üì© –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! ‚òùüèº</b>', reply_to_message_id=answer_message.message_id)
        elif message.content_type == ContentType.STICKER:
            answer_message = await bot.send_sticker(receiver_id, sticker=message.sticker.file_id, reply_markup=answer_kb(sender_id))
            await bot.send_message(receiver_id, f'<b>üì© –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è! ‚òùüèº</b>', reply_to_message_id=answer_message.message_id)
        else:
            await message.answer('<b>‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑</b>')
            return
        await message.answer('<b>‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</b>')
    except:
        await message.answer('<b>‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>')
    await state.clear()

@user_router.callback_query(F.data == 'back')
async def back(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.answer()
    if callback.message.content_type == ContentType.PHOTO:
        await callback.message.answer(f'<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π! –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞, –ø–µ—Ä–µ–π–¥—è –ø–æ –Ω–µ–π, —á–µ–ª–æ–≤–µ–∫ —Å–º–æ–∂–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–º–∏–º–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: –∫—Ä—É–∂–∫–∏, –≥–æ–ª–æ—Å–æ–≤—ã–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–∏–¥–µ–æ, —Å—Ç–∏–∫–µ—Ä—ã –∏ –≥–∏—Ñ–∫–∏\n\nüîó https://t.me/{BOT_USERNAME}?start={callback.message.chat.id}</b>',
                                            reply_markup=start_kb, disable_web_page_preview=True)
    else:
        await callback.message.edit_text(f'<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π! –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞, –ø–µ—Ä–µ–π–¥—è –ø–æ –Ω–µ–π, —á–µ–ª–æ–≤–µ–∫ —Å–º–æ–∂–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–º–∏–º–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: –∫—Ä—É–∂–∫–∏, –≥–æ–ª–æ—Å–æ–≤—ã–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–∏–¥–µ–æ, —Å—Ç–∏–∫–µ—Ä—ã –∏ –≥–∏—Ñ–∫–∏\n\nüîó https://t.me/{BOT_USERNAME}?start={callback.message.chat.id}</b>',
                                            reply_markup=start_kb, disable_web_page_preview=True)
    await state.clear()

@user_router.callback_query(F.data == 'info')
async def info(callback: CallbackQuery) -> None:
    await callback.answer()
    await callback.message.answer_photo(IMG_URL, caption=f'<b>–í—ã—Å—Ç–∞–≤—å —ç—Ç—É —Å—Å—ã–ª–∫—É –∫ —Å–µ–±–µ –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è, –∏ –ª—é–±–æ–π —á–µ–ª–æ–≤–µ–∫ —Å–º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–±–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üí¨\n\n–¢–≤–æ—è —Å—Å—ã–ª–∫–∞: <code>https://t.me/{BOT_USERNAME}?start={callback.message.chat.id}</code></b>',
                                        reply_markup=back_kb)

@user_router.message(Command('info'))
async def info(message: Message) -> None:
    await message.answer_photo(IMG_URL, caption=f'<b>–í—ã—Å—Ç–∞–≤—å —ç—Ç—É —Å—Å—ã–ª–∫—É –∫ —Å–µ–±–µ –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è, –∏ –ª—é–±–æ–π —á–µ–ª–æ–≤–µ–∫ —Å–º–æ–∂–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–±–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üí¨\n\n–¢–≤–æ—è —Å—Å—ã–ª–∫–∞: <code>https://t.me/{BOT_USERNAME}?start={message.chat.id}</code></b>',
                                reply_markup=back_kb)

@user_router.message()
async def echo(message: Message) -> None:
    await message.answer('<b>‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—É—é –∫–æ–º–∞–Ω–¥—É</b>')